import org.opensearch.gradle.test.RestIntegTestTask

buildscript {
  ext {
    opensearch_version = System.getProperty("opensearch.version", "3.3.0-SNAPSHOT")
    is_snapshot = "true" == System.getProperty("build.snapshot", "true")
    build_version_qualifier = System.getProperty("build.version_qualifier", "")

    version_tokens = opensearch_version.tokenize('-')
    opensearch_build = version_tokens[0] + '.0'
    if (build_version_qualifier) {
      opensearch_build += "-${build_version_qualifier}"
    }
    if (is_snapshot) {
      opensearch_build += "-SNAPSHOT"
    }
    common_utils_version = System.getProperty("common_utils.version", opensearch_build)
  }

  repositories {
    mavenLocal()
    maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'maven-publish'
  id 'com.diffplug.spotless' version '6.25.0' apply false
}

group = 'org.opensearch'
version = opensearch_build

apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.java-rest-test'
apply plugin: 'opensearch.rest-resources'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'opensearch.java-agent'
apply plugin: 'com.diffplug.spotless'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// license of this project
licenseFile = rootProject.file('LICENSE.txt')
// copyright notices
noticeFile = rootProject.file('NOTICE.txt')

// disable uploadArchives task for now, no upload happening currently
//GSI TODO: disabled for now
//uploadArchives.enabled = false

opensearchplugin {
  name 'opensearch-ltr'
  description 'Learning to Rank Query w/ RankLib Models'
  classname 'com.o19s.es.ltr.LtrQueryParserPlugin'
  // license of the plugin, may be different than the above license
  licenseFile = rootProject.file('LICENSE.txt')
  // copyright notices, may be different than the above notice
  noticeFile = rootProject.file('NOTICE.txt')
}

publishing {
  publications {
    pluginZip(MavenPublication) { publication ->
      pom {
        name = "opensearch-ltr"
        description = "Learning to Rank Query w/ RankLib Models"
        licenses {
          license {
            name = "The Apache License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }
        developers {
          developer {
            name = "OpenSearch"
            url = "https://github.com/opensearch-project/opensearch-learning-to-rank-base"
          }
        }
      }
    }
  }

  repositories {
    maven {
      name = 'staging'
      url = layout.buildDirectory.dir('local-staging-repo')
    }
    maven {
      name = "Snapshots"
      url = "https://central.sonatype.com/repository/maven-snapshots/"
      credentials {
        username System.getenv("SONATYPE_USERNAME")
        password System.getenv("SONATYPE_PASSWORD")
      }
    }
  }
}

// In this section you declare the dependencies for your production and test code
// OpenSearch dependency is included due to the build-tools, test-framework as well
repositories {
  mavenLocal()
  maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
  maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
  mavenCentral()
  maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
  implementation "org.apache.lucene:lucene-expressions:${luceneVersion}"
  implementation "org.antlr:antlr4-runtime:${antlrVersion}"
  implementation "org.ow2.asm:asm:${ow2Version}"
  implementation "org.ow2.asm:asm-commons:${ow2Version}"
  implementation "org.ow2.asm:asm-tree:${ow2Version}"
  implementation 'com.o19s:RankyMcRankFace:0.1.1'
  implementation "com.github.spullara.mustache.java:compiler:0.9.3"
  implementation "org.conscrypt:conscrypt-openjdk-uber:2.5.2"
  implementation 'org.slf4j:slf4j-api:2.0.17'
  testImplementation 'org.slf4j:slf4j-simple:2.0.17'
  implementation "org.opensearch:common-utils:${common_utils_version}"

  runtimeOnly 'org.locationtech.spatial4j:spatial4j:0.7'
  runtimeOnly 'org.locationtech.jts:jts-core:1.15.0'
}

configurations.configureEach {
  resolutionStrategy.force "com.google.guava:guava:32.1.3-jre"
  resolutionStrategy.force 'org.eclipse.platform:org.eclipse.core.runtime:3.29.0'
  resolutionStrategy.force 'org.slf4j:slf4j-api:2.0.17'
}

configurations {
  runtimeClasspath {
    exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-jul'
  }
}

// see https://github.com/opensearch-project/OpenSearch/blob/0ba0e7cc26060f964fcbf6ee45bae53b3a9941d0/buildSrc/src/main/java/org/opensearch/gradle/precommit/DependencyLicensesTask.java
dependencyLicenses {
  mapping from: /lucene-.*/, to: 'lucene'
  mapping from: /asm-.*/, to: 'asm'
  mapping from: /RankyMcRankFace.*/, to: 'lucene'
  //mapping from: /Ranky.*/, to: 'lucene'
  mapping from: /compiler.*/, to: 'lucene'
}

sourceSets {
  javaRestTest {
    compileClasspath += sourceSets["main"].output + sourceSets["test"].output + configurations["testRuntimeClasspath"]
    runtimeClasspath += output + compileClasspath
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
  withSourcesJar()
  withJavadocJar()
}


// Set to false to not use opensearch checkstyle rules
// checkstyleMain.enabled = true
// checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
// dependencyLicenses.enabled = false
// FIXME thirdparty audit needs to be enabled
// thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
// licenseHeaders.enabled = false

// No need to validate POM, as we do not upload to sonatype
validateNebulaPom.enabled = false

// Elastic tried to remove the logging requirement for plugins, but didn't get it quite right so this is a short term fix until 7.11
// https://github.com/elastic/opensearch/issues/65247
loggerUsageCheck.enabled = false

// Custom task for running integration tests
tasks.register('integTest', RestIntegTestTask) {
    description = "Run integration tests from src/javaRestTest"
    // Specify the classpath for integration tests
    testClassesDirs = sourceSets.javaRestTest.output.classesDirs
    classpath = sourceSets.javaRestTest.runtimeClasspath
}

testClusters.register("integTest") {
  // adds LTR as a plugin to the OS build
  plugin(project.tasks.bundlePlugin.archiveFile)
}

tasks.named("check").configure {
  dependsOn(integTest)
  dependsOn(spotlessCheck)
}

integTest {
  dependsOn "bundlePlugin"
  systemProperty 'tests.security.manager', 'false'

  systemProperty "https", System.getProperty("https")
  systemProperty "user", System.getProperty("user")
  systemProperty "password", System.getProperty("password")

  // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
  if (System.getProperty("test.debug") != null) {
    jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
  }
}

tasks.register('integTestRemote', RestIntegTestTask) {
    description = "Run integration tests from src/javaRestTest"
    testClassesDirs = sourceSets.javaRestTest.output.classesDirs
    classpath = sourceSets.javaRestTest.runtimeClasspath

    systemProperty 'tests.security.manager', 'false'
    systemProperty "https", System.getProperty("https")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")
}

tasks.withType(Test).configureEach { task ->
  if (JavaVersion.current().compareTo(JavaVersion.VERSION_17) > 0 && JavaVersion.current().compareTo(JavaVersion.VERSION_21) < 0) {
    def policyFile = file("${projectDir}/src/main/plugin-metadata/plugin-security.policy").absolutePath
    task.jvmArgs += [
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "-Djava.security.manager",
            "-Djava.security.policy=" + policyFile
    ]
  }
}

['forbiddenApisTest', 'testingConventions', 'forbiddenApisJavaRestTest'].each { taskName ->
  tasks.named(taskName).configure {
    enabled = false
  }
}

tasks.named('dependencyLicenses') {
  enabled = false
}

thirdPartyAudit {
  ignoreViolations('org.conscrypt.Platform')
}

plugins.withId('com.diffplug.spotless') {
  // Configure Spotless only if/when the plugin is applied (e.g., by parent project)
  spotless {
    java {
      removeUnusedImports()
      importOrder 'java', 'javax', 'org', 'com'
      eclipse().withP2Mirrors(Map.of("https://download.eclipse.org/", "https://mirror.umd.edu/eclipse/")).configFile rootProject.file('.eclipseformat.xml')
    }
  }
}

tasks.named("run").configure {
    // Configure RunTask with the registered integTest cluster
    getClusters().add(testClusters.named("integTest").get())
}

// updateVersion: Task to auto update version to the next development iteration
tasks.register('updateVersion') {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file: 'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags: 'g', byline: true)
    }
}
